// Online C++ compiler to run C++ program online
// Online C++ compiler to run C++ program online
#include<iostream>
using namespace std;
int count=0,sum=0;
class BST
{
	public:
	string post,name;
	int id,salary;
	BST *left;
	BST *right;
	BST(string x , int y, string z , int a)
	{
		name=x;
		id=y;
		post=z;
		salary=a;
		left=nullptr;
		right=nullptr;
	}
	friend void create();
	friend void display(BST *);
	friend void update();
	friend void search(BST *);
	friend void Properties(BST *);
}*root,*temp;

void create()
{
root=nullptr;
BST *current;
string name1,post1;
int id1,salary1;
int choice;
	do
	{
		cout<<"# Name : ";
		cin>>name1;
		cout<<"# ID : ";
		cin>>id1;
		cout<<"# Post : ";
		cin>>post1;
		cout<<"# Salary : ";
		cin>>salary1;
		temp=new BST(name1,id1,post1,salary1);
		count++;
		sum+=salary1;
		if(root==nullptr)
		{
			root=temp;
		}
		else
		{
		    current=root;
			while(current!=nullptr)
			{
			if(current->salary>temp->salary)
			{
				if(current->left==nullptr)
				{
					current->left=temp;
					break;
				}
				else
				{
					current=current->left;	
				}
			}
		    else
		     {
		     	if(current->right==nullptr)
		     	{
		     		current->right=temp;
		     		break;
		     	}
		     	else
		     	{
		     		root=root->right;
		     	}
		     }
		   }		
		}
		cout<<"Do You want To continue , Press 1 : ";
		cin>>choice;
	}while(choice==1);
}

void updating(BST *root)
{
        BST *temp;
		while(root!=nullptr)
		{
		    if(root->salary>root->left->salary&&root->left!=nullptr)
		    {
		       temp->name=root->left->name;
		       root->left->name=root->name;
		       root->name=temp->name;
		       temp->id=root->left->id;
		       root->left->id=root->id;
		       root->id=temp->id;
		       temp->post=root->left->post;
		       root->left->post=root->post;
		       root->post=temp->post;
		       temp->salary=root->left->salary;
		       root->left->salary=root->salary;
		       root->salary=temp->salary;
		    }
		    else if(root->salary<=root->right->salary&&root->right!=nullptr)
		    {
		       temp->name=root->right->name;
		       root->right->name=root->name;
		       root->name=temp->name;
		       temp->id=root->right->id;
		       root->right->id=root->id;
		       root->id=temp->id;
		       temp->post=root->right->post;
		       root->right->post=root->post;
		       root->post=temp->post;
		       temp->salary=root->right->salary;
		       root->right->salary=root->salary;
		       root->salary=temp->salary;
		    }
		    if(root->salary>root->left->salary&&root->salary>=root->right->salary)
		    {
		        break;
		    }
		    if(root->left&&root->right==NULL)
		    {
		        BST *temp;
		        temp=current;
		        while(current!=NULL)
		        {
		            if(current->salary>root->salary)
		            {
		           
		                current=current->left;
		               
		             if(current==nullptr)
		             {
		                 current=root;
		                 break;
		             }
		            }
		            else{
		                current=current->right;
		                if(current==nullptr)
		                {
		                    current=root;
		                    break;
		                }
		            }
		        }
		    }
		}
}

void update()
{
    int tempid,tempsalary,flag=0;
    cout<<"Enter Your current ID and salary: ";
    cin>>tempid>>tempsalary;
    if(root==nullptr)
    {
        cout<<"BST is not created Yet !";
    }
    BST *root1=root;
    while(root1!=nullptr)
    {
         if(root1->salary==tempsalary)
        {
        
        cout<<"Enter Updated Employee Information \n";
        cout<<"# Name : ";
		cin>>root1->name;
		cout<<"# ID : ";
		cin>>root1->id;
		cout<<"# Post : ";
		cin>>root1->post;
		cout<<"# Salary : ";
		cin>>root1->salary;
		
            updating(root1);
            flag=1;
            break;
        }
        else if(root->salary>tempsalary)
        {
            root1=root1->left;
        }
        else
        {
            root1=root1->right;
        }
    }
    if(flag==0)
        cout<<"\n Employee not Found ! ";
}

void search(BST *root)
{
int flag=0;
int key;
     if(root==nullptr)
    {
        cout<<"BST is not created Yet !";
    }
    cout<<"Enter Salary of Employee : ";
    cin>>key;
    while(root!=nullptr)
    {
        if(root->salary==key)
        {
            cout<<"Employee Details Found !\n";
            display(root);
            flag=1;
            break;
        }
        else if(root->salary<key)
        {
            root=root->left;
        }
        else
        {
            root=root->right;
        }
    }
    if(flag==0)
        cout<<"Employee Not Found !";
}

void Properties(BST *current,BST *root)
{
    if(current==nullptr)
    {
            cout<<"BST is not created Yet !";
    }
    else
    {
    while(current->left!=nullptr)
    {
        current=current->left;
    }
    cout<<"\n# Minimum Salary of Employee is : "<<current->salary;
    current=root;
    while(current->right!=nullptr)
    {
        current=current->right;
    }
    cout<<"\n# Maximum Salary of Employee is : "<<current->salary;
    current=root;
    }
}

void display(BST *current)
{
	if(current==nullptr)
	{return;}
	cout<<"\n# Name : "<<current->name<<"\n# ID : "<<current->id<<"\n# Post : "<<current->post<<"\n# Salary : "<<current->salary;
	display(current->left);
	display(current->right);
}

int main()
{
	int ch;
	do{
	cout<<"\n1.Create \n2.Display \n3.Update\n4.Search\n5.Properties\nEnter Your Choice : ";
	cin>>ch;
	switch(ch)
	{
		case 1: create();
		break;
		
		case 2: display(root);
		break;
		
		case 3: update();
		break;
		
		case 4: search(root);
		break;
		
		case 5: Properties(root,root);
		cout<<"\n# No. of Employess's are : "<<count;
		cout<<"\n# Average of salary's of Employee's is : "<<sum/count;
		
		default:cout<<"Invalid Choice";
	}
	}while(ch!=4);
	return 0;
